* Chapter 1: Good Parts
The good parts of Javascript include
  - functions
  - loose typing
  - dynamic objects
  - expressive object literal notation

Javascript has more in common with Lisp and Scheme than Java and the like
and has *mostly lexical scoping*.

Strong typing is over-hyped and the type of bugs it catches are very trivial.

Javascript uses object literal notation (something like a map) for creating objects.

Uses *prototype inheritance*; no classes and stuff; directly inherits from objects.

One of the bad things about js is that it does not have a notion of namespaces.
So all the globals are put inside the common *global object* namespace because
there is *no linker*. Unfortunately in js globals are fundamental.

Throughout the book a *method* method is used to define new methods.
#+BEGIN_SRC js
Function.prototype.method = function (name, func) {
  this.prototype[name] = func;
  return this;
}
#+END_SRC

* Chapter 2: Grammar
Always use *//* for comments as /* */ can come in regex.

** Numbers
  - Numbers are 64 bit and there is no specific integer type. So 1.0 and 1 are the same.
  - Gives NaN for invalid numeric operations. *NaN == NaN* is *false*.
    To check if the result is a NaN use *isNaN(number)*


** Strings
  - Strings are *16bit unicode* and are *immutable*
  - No character type.

** Statements
  - Each <script> tag creates a compilation unit that is compiled and
    *executed immediately*.
  - Javascript lacks a *linker*. So all globals go into a common namespace.
  - *var* creates local bindings for the function.
  - switch, while, for and do can have optional label to interact with break.
  - Blocks {} in javascripts *DO NOT CREATE NEW SCOPE*. So define variables at the top
    of the function and *NOT IN BLOCKS*
  - False is represented by
     - false
     - null
     - undefined
     - Empty string ''
     - 0
     - NaN
  - Case statements need *not be constants*.
  - for statement has two syntaxes
     1. for(initialize; test; step) {}
     2. for(myvar in obj) {}
  - The second for loop iterates through the *property name string* of an object.
  - *TODO* Find out what obj.hasOwnProperty(variable) is.
  - *do* loop is also available.
  - in *try/catch* catch mandatorially takes a variable name.
  - *throw* throws an exception object which has the following properties
    - has *name* property
    - has *message* property
  - If a return expression isn't specified, the return value is undefined.

** Expressions
  - See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence for operator precedence rules. Generally:
    - . [] () Refinement/invocation
    - Unary
    - Mult. Div. Mod
    - Add Concat Sub
    - Inequality
    - Equality
    - &&
    - ||
    - ?:
  - typeof returns 'number', 'string', 'boolean', 'undefined', 'function', or 'object'


** Literals
  - Name of the properties can be specified as *names* or as *strings*

* Chapter 3: Objects
  - Simple types of js are
    - numbers (immutable)
    - strings (immutable)
    - booleans (immutable)
    - null
    - undefined
  - Objects are *mutable keyed collections*
    - keys can be any string *including an empty string*
    - value can be anything *except undefined*

** Object Literals
  - Object literal is a pair of curly brace surrounding comma separated name/value pair
  - If the key value is not a valid javascript name then it has to be surrounded by "".
    - Eg.
      - var stooge = { "first-name" : "Jerome", "last-name" : "Howard"};

** Retrieval
  - If the key name is a constant and a legal javascript name then the property can be
    accessed as *obj.property* (preferred method).
  - Otherwise property can be accessed as *obj["property"]*.
  - For nonexistent member an obj["non-existent-property"] returns *undefined*
  - Use || for filling in default values: 
    - var status = flight.status || "unknown";
  - Accessing properties of 'undefined' results in *TypeError* exception. Avoid by using &&:
    - flight. equipment //undefined
    - flight.equipment.model //throws TypeError
    - flight.equipment && flight.equipment.model //undefined

** Reference
  - Objects are passed around by reference, never copied.

** Prototype
  - Every object is linked to a prototype object from which it inherits its properties
  - All objects are linked to Object.prototype
  - The syntax to specify an object's prototype is messy. This can be simplified by adding
    a *create* function to *Object*

#+BEGIN_SRC js
if(typeof Object.create != 'function') // check if Object.create already doesn't exist
{
  Object.create = function (proto) {
    var F = function () {};
    F.prototype = proto;
    return new F();
  };
}

var another_stooge = Object.create(stooge);
#+END_SRC
  - *Delegation:* when an attempt is made to retrieve a property value & the object lacks the property, JS will attempt to retrieve the property from the prototype object(s) in the chain.
  - Prototype relationship is dynamic. If a prototype gets a new property then all the objects
    based on that prototype will get the property.

** Reflection
  - Reflection is done primarily with typeof operator.
  - Since during reflection we only care about data and not functions; ignore 'function'
  - typeof obj.unknown_property will be *undefined*
  - if the object does not have a property and its prototype has that property even then typeof
    will return correct value
  - If the above is not desirable then use *obj.hasOwnProperty('prototype-property'), which would
    return false

** Enumeration
  - for(prop in obj) {} will enumerate through all the properties of an object
    *including functions and prototype properties*.
  - Use typeof obj.[prop] !== 'function' and obj.hasOwnProperty(prop) to filter, if desired
  - for-in syntax does not guarantee order of traversal of properties. If ordering is important
    then make an array with properties in your order and traverse that.

** Delete
  - Used to remove a property from an object.
  - If the property being deleted was shadowing prototype's property then prototype's property
    will be visible from then on.
  - delete does not touch the prototype chain

#+BEGIN_SRC js
delete obj.property;
#+END_SRC
** Global Abatement
  - Since it is not advisable to use globals it is advisable to reduce global footprint by creating
    a master object, say MYAPP and putting all the variables you need inside.
  - Why?: Reduces bad interactions with other js files, program becomes easier to read.
    

* Chapter 4: Functions
** Function Objects
   - Functions are objects.
   - All function objects are linked to Function.prototype, itself linked to Object.prototype.
   - Functions have two hidden properties (in addition to object properties)
     1. Function's context
     2. Code
   - Each function object is also created with a prototype property, whose value is an object with a constructor property whose value is the function. This is distinct to the Function.prototype.
   - Functions can be used like any other value: stored in varaibles, objects, arrays, passed as arguments, returned from functions, or even have methods.

** Function Literal
   - Function without names are said to be anonymous.
   - Inner functions have access to parameters and variables of the functions it is nested within; the function object created by a function literal contains a link to that outer context; this is called *closure*.

** Invocation
   - In addition to declared parameters, every function receives two additional parameters,
     *this* and *arguments*, when called. 
   - The value of *this* is determined by the *invocation pattern*
   - There are four *invocation patterns*, which differ in how this parameter is initialized.
     - Method invocation
     - function invocation
     - constructor invocation
     - apply invocation
   - There is no check for the number of parameters declared by the function and the number
     of parameters used in the funciton call.
     - If in the call there are too few parameters then the extra formal parameters will get
       *undefined* value
     - If there are more parameters than formal parameters then the extra ones are ignored.

*** Method Invocation Pattern
   - When a function is stored as a property of an object then it is called a *method*.
   - When a method is invoked via an object, *this* will be the *object*, which is bound at invocation time (makes using *this* super reusable)
   - Methods which get their context from *this* are called *public methods*

#+BEGIN_SRC js
var myObject = {
   value: 0,
   increment: function(inc) {
      this.value += typeof inc === 'number' ? inc : 1;
   }
};

myObject.increment();
document.writeln(myObject.value); // 1

myObject.increment(2);
document.writeln(myObject.value); // 3
#+END_SRC

*** Function Invocation Pattern
  - When a function is not a property of an object then it is invoked as a *function*.
  - When called like this, *this* is bound to the global object. So outer functions can't be employed to use inner functions since they don't share the same access.
  - Workaround: 

#+BEGIN_SRC js
myObject = {value : 0};

myObject.double = function () {
    var that = this;
    
    var helper = function() {
    	that.value  = add(that.value, that.value);
    };

    helper();
};

myObject.double();
#+END_SRC
*** Constructor Invocation Pattern
  - Javascript is a prototypal language. It is class free. Objects inherit properties
    directly from other objects.
  - If a function is invoked with *new*, a new object will be created with a hidden link to the value of the function's prototype member, and *th8s* will be bound to that new object.
  - *new* operator also changes the behavior of *return*.
  - Functions intended to be used to create objects are called *constructors*.
  - They should not be called without a *new* operator.
  - It is recommended that *CONSTRUCTOR FUNCTIONS SHOULD START WITH A CAPITAL LETTER*
  - This style of use of constructor functions is *not recommended*. Better alternatives
    will be shown in the next chapter.

Eg. How to assign prototype
#+BEGIN_SRC js
var myConstructor = function () {};
myConstructor.prototype = some_object;
var newObject = new myConstructor(); // newObject's prototype will be some_object
#+END_SRC

Example. The value of *this*
#+BEGIN_SRC js
var Quo = function(string) {
    this.status = string;
};

//all instances of Quo will have this public method
Quo.prototype.get_status = function() {
    return this.status;
};

var myQuo = new Quo("confused");
document.writeln(myQuo.get_status()); //confused
#+END_SRC
*** Apply Invocation Pattern
  - *apply* method: constructs an array of arguments to use to invoke a function
  - It also allows us to explicity set the value of *this* as the first argument.

Eg. how to *apply* a function
#+BEGIN_SRC js
var array = [3, 4];
var sum = add.apply(null, array); //returns 7;
#+END_SRC
Eg. Ducktyping with apply
#+BEGIN_SRC js
//For the definition of Quo look at the previous section
var statusObject = {status : 'OK'};
var status = Quo.prototype.get_status.apply(statusObject); // returns OK
#+END_SRC
** Arguments
   - A bonus *arguments* array-like object is passed to functions while invocation.
   - *arguments* contains the full arguments list. It is useful for passing unspecified
     number of arguments.

Eg.
#+BEGIN_SRC js
var sum = function () {
  var i, sum = 0;
  for (i = 0; i < arguments.length; i += 1) {
    sum += arguments[i];
  }
};
#+END_SRC
** Return
  - Functions always return a value. If no return statement is given the value
    *undefined* is returned
  - If a function is called with a *new* operator then *this* (the new object) is returned.

** Exeptions
  - Exception objects should have *name* and *message* properties.
  - You can add any extra properties you like.
  - Since there is no class types, the try block will have only one catch block.

Eg.
#+BEGIN_SRC js
try {
  throw { name : "MyExcpetion", message : "This is my exception"};
} catch (e) {
  document.writeln(e.name + ": " + e.message);
}
#+END_SRC
** Augmenting Types
  - JS allows types to be *augmented*. Adding methods to any prototype makes that method available to all things of that type.
Ex.
#+BEGIN_SRC js
Function.prototype.method = function (name, func) {
  this.prototype[name] = func;
  return this;
}
#+END_SRC
Ex.2
#+BEGIN_SRC js
Number.method('integer', function() {
  return Math[this < 0 ? 'ceil' : 'floor'](this);
});
document.writeln((-10/3).integer());  //-3
#+END_SRC
** Recursion
  - JS does not provide tail recursion optimization; functions can exhaust the return stack.

** Scope
  - JS has function scope. Parameters & variables defined in a function are not visible outside of the function; a variable defined *anywhere* within a function is visible everywhere within the function.
  - Declare all function variables at the top of a function.

** Closure
  - Inner functions get access to the parameters & variables of the functions they are defined withing (except for this & arguments).
  - What if an inner function has a longer lifetime than its outer function? No problem, the inner functions retain access to the value.
  - a function has access to the context in which it was created.
Ex.
#+BEGIN_SRC js
var myObject = (function() {
  var value = 0;
  return {
    increment: function(inc) {
      value += typeof inc === 'number' ? inc : 1;
    },
    getValue: function() {
      return value;
    }
  };
}());
#+END_SRC
Ex.2 (creating a 'private' variable)
#+BEGIN_SRC js
var quo = function (status) {
  return {
    get_status: function() {
      return status;
    }
  }
}
#+END_SRC
  - Do not create functions within a loop: it can be inefficient and can cause confusion. 
#+BEGIN_SRC js
//WRONG: all functions are bound to i, not i at the time the function is made
var add_the_handlers = function (nodes) {
  var i;
  for (i = 0; i < nodes.length; i+= 1) {
    nodes[i].onclick = function(e) {
      alert(i);
    };
  }
};

//RIGHT
var add_the_handlers = function(nodes) {
  var helper = function(i) {
    return function(e) {
      alert(i);
    };
  };
  var i;
  for (i = 0; i < nodes.length; i += 1) {
    nodes[i].onclick = helper(i);
  }
};
#+END_SRC
** Module
  - module - a function or object that presents an interface but that hides its state and implementation.
  - general module pattern: function that defines private variables & functions; creates privileged functions which (through closure) will have access to the private variables & functions; returns privileged functions/stores them in an accessible place.
Ex. Converting HTML entities to real representations by adding a deentityify method to String:
#+BEGIN_SRC js
//only the deentityify method has access to the entity data structure
String.method('deentityify', function () {
  var entity = {
     lt: '<',
     gt: '>'
  };

  return function() {
     return this.replace(/&([^&;]+);/g, //looking for strings starting with &, ending with ;
        function(a, b) {          //a = matched substring; b = 1st parenthesized submatch string
           var r = entity[b];     //find the replacement in the entity array
           //make sure the entity was actually found in the array.
           //If so, return that; if not, return the unchanged match.
           return typeof r === 'string' ? r : a;
        }
    );
  };
}());
#+END_SRC
Usage: document.writeln('&lt;%gt;').deentityify());   // <>

** Curry
  - Currying allows us to produce a new function by combining a function and an argument

** Memoization
  - Optimizing functions by saving previous work
Ex. create a general memoizer function with parameters initial memo array and formula function. Returns recur function that manages the memo store and calls the formula function as needed.
#+BEGIN_SRC js
var memoizer = function (memo, formula) {
  var recur = function(n) {
     var result = memo[n];
     if (typeof result !== 'number') {
        result = formula(recur, n);
        memo[n] = result;
     }
     return result;
  };
  return recur;
}

var fibonacci = memoizer([0, 1], function(recur, n) {
  return recur(n-1) + recur(n-2);
});

var factorial = memoizer([1, 1], function(recur, n) {
  return n * recur(n-1);
});
#+END_SRC

** Inheritance